apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'signing'

version = '19.0.6'
archivesBaseName = 'thoughtj-core'
eclipse.project.name = 'thoughtj-core'

dependencies {
    implementation 'org.bouncycastle:bcprov-jdk15to18:1.69'
    implementation 'com.google.guava:guava:30.0-android'
    implementation 'com.google.protobuf:protobuf-javalite:3.16.3'
    implementation 'com.squareup.okhttp3:okhttp:3.12.8'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'net.jcip:jcip-annotations:1.0'
    compileOnly 'org.fusesource.leveldbjni:leveldbjni-all:1.8'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.easymock:easymock:3.2'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.12.7.1'
    testImplementation 'org.slf4j:slf4j-jdk14:1.7.30'
    // https://mvnrepository.com/artifact/com.h2database/h2
    testImplementation group: 'com.h2database', name: 'h2', version: '2.2.224'
    testImplementation 'org.fusesource.leveldbjni:leveldbjni-all:1.8'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'

    // Dash Specific
    implementation 'de.sfuhrm:saphir-hash-core:3.0.10'
    implementation 'org.dashj:dashj-bls:1.0.0'
    implementation 'com.lambdaworks:scrypt:1.4.0'
    implementation 'org.json:json:20230227'

}

sourceCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.16.3'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

test {
    exclude 'org/bitcoinj/core/PeerTest*'
    exclude 'org/bitcoinj/core/TransactionBroadcastTest*'
    exclude 'org/bitcoinj/net/NetworkAbstractionTests*'
    exclude 'org/bitcoinj/protocols/channels/ChannelConnectionTest*'
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
}

tasks.withType(Test).configureEach {
    systemProperty "java.library.path", "../contrib/dashj-bls/bls/target/cmake:../contrib/x11/build"
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives javadocJar
}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

assemble.dependsOn(publishToMavenLocal)
assemble.dependsOn(sourcesJar)

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        xml.outputLocation = file("${project.projectDir}/build/reports/jacoco/jacoco.xml")
    }
}